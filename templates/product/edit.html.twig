{#
    Template: Editar Producto Existente (edit)

    PROP√ìSITO:
    - Formulario para modificar un producto existente
    - Muestra informaci√≥n de auditor√≠a (qui√©n lo cre√≥, cu√°ndo)
    - Incluye formulario reutilizable _form.html.twig
    - Permite eliminar el producto

    DATOS RECIBIDOS:
    - form: Objeto FormView con el formulario ProductType prellenado
    - product: Objeto Product existente (desde ProductController::edit)

    DIFERENCIAS CON new.html.twig:
    - S√ç muestra info de auditor√≠a (alert azul con creador y fechas)
    - T√≠tulo din√°mico con nombre del producto
    - Label del bot√≥n: "Actualizar Producto" vs "Guardar Producto"
    - Incluye bot√≥n "Ver detalle" adicional
    - Incluye formulario de eliminaci√≥n

    CARACTER√çSTICAS ESPECIALES:
    - Alert info con datos de auditor√≠a (SOLO en edit, NO en new)
    - Acceso a relaciones: product.createBy.name
    - Formato de fechas personalizado
    - Lifecycle callback: updatedAt se actualiza autom√°ticamente

    FLUJO:
    1. Usuario modifica campos
    2. Al enviar, ProductController::edit() valida
    3. Si es v√°lido:
       - Doctrine ejecuta UPDATE en BD
       - Lifecycle callback @PreUpdate actualiza updatedAt
       - Flash message de √©xito
       - Redirecci√≥n a listado
    4. Si hay errores: vuelve a mostrar formulario con mensajes
#}
{% extends 'home/base.html.twig' %}

{# T√≠tulo din√°mico: incluye el nombre del producto que se est√° editando #}
{% block title %}Editar Producto - {{ product.nombre }}{% endblock %}

{% block breadcrumbs %}
  {% include 'partials/_breadcrumbs.html.twig' with {
    items: [
      { label: 'Productos', route: 'app_product_index' },
      { label: 'Editar', active: true }
    ]
  } %}
{% endblock %}

{% block content %}
    {% set cardBody %}
        <h1>Editar Producto</h1>

    {#
        ===== BLOQUE DE AUDITOR√çA (SOLO EN EDIT) =====

        Este bloque NO aparece en new.html.twig porque el producto a√∫n no existe.
        Muestra informaci√≥n importante sobre el origen del producto:

        1. Qui√©n lo cre√≥: product.createBy (relaci√≥n ManyToOne con User)
        2. Cu√°ndo se cre√≥: product.createdAt (timestamp)
        3. √öltima actualizaci√≥n: product.updatedAt (timestamp, puede ser null)

        ACCESO A RELACIONES EN TWIG:
        - product.createBy ‚Üí llama a $product->getCreateBy() ‚Üí retorna objeto User
        - product.createBy.name ‚Üí llama a $user->getName() ‚Üí retorna string
        - product.createBy.email ‚Üí llama a $user->getEmail() ‚Üí retorna string

        OPERADOR ELVIS (?:):
        {{ product.createBy.name ?: product.createBy.email }}
        Significa: "Si name tiene valor, mu√©stralo; sino, muestra email"
        √ötil porque el campo name puede ser null en algunos usuarios

        FILTRO date():
        {{ product.createdAt|date('d/m/Y') }} ‚Üí 24/10/2025
        {{ product.createdAt|date('H:i') }} ‚Üí 14:30

        CONDICIONAL {% if product.updatedAt %}:
        Solo muestra la √∫ltima actualizaci√≥n si existe (no null)
        updatedAt es null cuando el producto nunca se ha editado
    #}
    <div class="alert alert-info mb-3">
        <strong>üìù Creado por:</strong>
        {{ product.createBy.name ?: product.createBy.email }}
        <span class="text-muted">
            el {{ product.createdAt|date('d/m/Y') }} a las {{ product.createdAt|date('H:i') }}
        </span>
        {% if product.updatedAt %}
            <br>
            <strong>üîÑ √öltima actualizaci√≥n:</strong>
            {{ product.updatedAt|date('d/m/Y H:i') }}
        {% endif %}
    </div>

    {#
        Card Bootstrap con el formulario de edici√≥n
        El card-header muestra el nombre y SKU actual del producto
    #}
    <div class="card">
        <div class="card-header">
            {# Muestra nombre y SKU actual (antes de editar) #}
            <h5 class="card-title mb-0">{{ product.nombre }} ({{ product.sku }})</h5>
        </div>
        <div class="card-body">
            {#
                Incluye el formulario parcial reutilizable

                IMPORTANTE: Es el MISMO formulario que en new.html.twig
                La diferencia es que aqu√≠ viene prellenado con los valores actuales
                del producto (Symfony hace esto autom√°ticamente)

                PAR√ÅMETROS:
                - button_label: "Actualizar Producto" (en new era "Guardar Producto")

                CAMPOS DEL FORMULARIO (_form.html.twig):
                1. SKU + Nombre (fila 1, 50% cada uno)
                2. Categor√≠a + Activo (fila 2, 50% cada uno)
                3. Descripci√≥n (fila 3, 100%)
                4. Precio + Costo + Stock (fila 4, 33% cada uno)

                CAMPOS EXCLUIDOS (no editables):
                - id: clave primaria (autom√°tico)
                - createdAt: fecha de creaci√≥n (solo lectura)
                - updatedAt: se actualiza autom√°ticamente con @PreUpdate
                - createBy: usuario creador (no debe cambiar, auditor√≠a)
            #}
            {{ include('product/_form.html.twig', {'button_label': 'Actualizar Producto'}) }}
        </div>
    </div>

    {# Botones de navegaci√≥n y acciones #}
    <div class="mt-3">
        {# Bot√≥n gris: volver sin guardar cambios #}
        <a class="btn btn-secondary" href="{{ path('app_product_index') }}">Volver al listado</a>

        {# Bot√≥n azul: ver la vista detallada (show) del producto #}
        <a class="btn btn-info" href="{{ path('app_product_show', {'id': product.id}) }}">Ver detalle</a>

        {#
            Formulario de eliminaci√≥n con SweetAlert2
            Incluye el partial _delete_form.html.twig que tiene:
            - Token CSRF
            - Clase js-delete-form para activar modal de confirmaci√≥n
            - Bot√≥n rojo "Eliminar"
            - Mensaje personalizado con nombre del producto
        #}
        {{ include('product/_delete_form.html.twig') }}
    </div>
    {% endset %}

    {% include 'partials/_card.html.twig' with {
        title: 'Editar Producto',
        content: cardBody,
        color: 'light'
    } %}
{% endblock %}
