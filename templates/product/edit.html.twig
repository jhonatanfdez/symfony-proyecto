{#
    Template: Editar Producto Existente (edit)

    PROP√ìSITO:
    - Formulario para modificar un producto existente
    - Muestra informaci√≥n de auditor√≠a (qui√©n lo cre√≥, cu√°ndo)
    - Incluye formulario reutilizable _form.html.twig
    - Permite eliminar el producto

    DATOS RECIBIDOS:
    - form: Objeto FormView con el formulario ProductType prellenado
    - product: Objeto Product existente (desde ProductController::edit)

    DIFERENCIAS CON new.html.twig:
    - S√ç muestra info de auditor√≠a (alert azul con creador y fechas)
    - T√≠tulo din√°mico con nombre del producto
    - Label del bot√≥n: "Actualizar Producto" vs "Guardar Producto"
    - Incluye bot√≥n "Ver detalle" adicional
    - Incluye formulario de eliminaci√≥n

    CARACTER√çSTICAS ESPECIALES:
    - Alert info con datos de auditor√≠a (SOLO en edit, NO en new)
    - Acceso a relaciones: product.createBy.name
    - Formato de fechas personalizado
    - Lifecycle callback: updatedAt se actualiza autom√°ticamente

    FLUJO:
    1. Usuario modifica campos
    2. Al enviar, ProductController::edit() valida
    3. Si es v√°lido:
       - Doctrine ejecuta UPDATE en BD
       - Lifecycle callback @PreUpdate actualiza updatedAt
       - Flash message de √©xito
       - Redirecci√≥n a listado
    4. Si hay errores: vuelve a mostrar formulario con mensajes
#}
{% extends 'home/base.html.twig' %}

{# T√≠tulo din√°mico: incluye el nombre del producto que se est√° editando #}
{% block title %}Editar Producto - {{ product.nombre }}{% endblock %}

{% block breadcrumbs %}
  {% include 'partials/_breadcrumbs.html.twig' with {
    items: [
      { label: 'Productos', route: 'app_product_index' },
      { label: 'Editar', active: true }
    ]
  } %}
{% endblock %}

{% block content %}
    {% set cardBody %}
        <h1>Editar Producto</h1>

    {#
        ===== BLOQUE DE AUDITOR√çA (SOLO EN EDIT) =====

        Este bloque NO aparece en new.html.twig porque el producto a√∫n no existe.
        Muestra informaci√≥n importante sobre el origen del producto:

        1. Qui√©n lo cre√≥: product.createBy (relaci√≥n ManyToOne con User)
        2. Cu√°ndo se cre√≥: product.createdAt (timestamp)
        3. √öltima actualizaci√≥n: product.updatedAt (timestamp, puede ser null)

        ACCESO A RELACIONES EN TWIG:
        - product.createBy ‚Üí llama a $product->getCreateBy() ‚Üí retorna objeto User
        - product.createBy.name ‚Üí llama a $user->getName() ‚Üí retorna string
        - product.createBy.email ‚Üí llama a $user->getEmail() ‚Üí retorna string

        OPERADOR ELVIS (?:):
        {{ product.createBy.name ?: product.createBy.email }}
        Significa: "Si name tiene valor, mu√©stralo; sino, muestra email"
        √ötil porque el campo name puede ser null en algunos usuarios

        FILTRO date():
        {{ product.createdAt|date('d/m/Y') }} ‚Üí 24/10/2025
        {{ product.createdAt|date('H:i') }} ‚Üí 14:30

        CONDICIONAL {% if product.updatedAt %}:
        Solo muestra la √∫ltima actualizaci√≥n si existe (no null)
        updatedAt es null cuando el producto nunca se ha editado
    #}
    <div class="alert alert-info mb-3">
        <strong>üìù Creado por:</strong>
        {{ product.createBy.name ?: product.createBy.email }}
        <span class="text-muted">
            el {{ product.createdAt|date('d/m/Y') }} a las {{ product.createdAt|date('H:i') }}
        </span>
        {% if product.updatedAt %}
            <br>
            <strong>üîÑ √öltima actualizaci√≥n:</strong>
            {{ product.updatedAt|date('d/m/Y H:i') }}
        {% endif %}
    </div>

    {#
        Card Bootstrap con el formulario de edici√≥n
        El card-header muestra el nombre y SKU actual del producto
    #}
    <div class="card">
        <div class="card-header">
            {# Muestra nombre y SKU actual (antes de editar) #}
            <h5 class="card-title mb-0">{{ product.nombre }} ({{ product.sku }})</h5>
        </div>
        <div class="card-body">
            {#
                Incluye el formulario parcial reutilizable

                IMPORTANTE: Es el MISMO formulario que en new.html.twig
                La diferencia es que aqu√≠ viene prellenado con los valores actuales
                del producto (Symfony hace esto autom√°ticamente)

                PAR√ÅMETROS:
                - button_label: "Actualizar Producto" (en new era "Guardar Producto")

                CAMPOS DEL FORMULARIO (_form.html.twig):
                1. SKU + Nombre (fila 1, 50% cada uno)
                2. Categor√≠a + Activo (fila 2, 50% cada uno)
                3. Descripci√≥n (fila 3, 100%)
                4. Precio + Costo + Stock (fila 4, 33% cada uno)

                CAMPOS EXCLUIDOS (no editables):
                - id: clave primaria (autom√°tico)
                - createdAt: fecha de creaci√≥n (solo lectura)
                - updatedAt: se actualiza autom√°ticamente con @PreUpdate
                - createBy: usuario creador (no debe cambiar, auditor√≠a)
            #}
            {{ include('product/_form.html.twig', {'button_label': 'Actualizar Producto'}) }}
        </div>
    </div>

    {# Botones de navegaci√≥n y acciones #}
    <div class="mt-3">
        {# Bot√≥n gris: volver sin guardar cambios #}
        <a class="btn btn-secondary" href="{{ path('app_product_index') }}">Volver al listado</a>

        {# Bot√≥n azul: ver la vista detallada (show) del producto #}
        <a class="btn btn-info" href="{{ path('app_product_show', {'id': product.id}) }}">Ver detalle</a>

        {#
            Formulario de eliminaci√≥n con SweetAlert2
            Incluye el partial _delete_form.html.twig que tiene:
            - Token CSRF
            - Clase js-delete-form para activar modal de confirmaci√≥n
            - Bot√≥n rojo "Eliminar"
            - Mensaje personalizado con nombre del producto
        #}
        {{ include('product/_delete_form.html.twig') }}
    </div>

    {#
        ===== SECCI√ìN DE GESTI√ìN DE IM√ÅGENES =====

        Esta secci√≥n permite:
        1. Subir nuevas im√°genes al producto (columna izquierda)
        2. Ver y eliminar im√°genes existentes (columna derecha)

        ARQUITECTURA:
        - Dos cards en columnas (col-md-6 cada una)
        - Formulario de subida apunta a ProductImageController::uploadImages()
        - Cada imagen tiene bot√≥n de eliminar que apunta a ProductImageController::deleteImage()

        FLUJO DE SUBIDA:
        1. Usuario selecciona hasta 10 im√°genes (HTML5 multiple)
        2. Validaciones: m√°x 10, 5MB c/u, JPEG/PNG/WEBP
        3. POST a /admin/product/{id}/images (ID del producto)
        4. ProductImageController procesa archivos, genera nombres √∫nicos, guarda en uploads/products/
        5. Crea entidades ProductImage asociadas al producto
        6. Redirecciona de vuelta al edit con flash de √©xito

        FLUJO DE ELIMINACI√ìN:
        1. Usuario hace clic en bot√≥n "Eliminar" de una imagen
        2. SweetAlert2 muestra confirmaci√≥n (gracias a clase js-delete-form)
        3. Si confirma: POST a /admin/product/image/{id}/delete (ID de la imagen)
        4. ProductImageController elimina registro DB + archivo f√≠sico
        5. Redirecciona de vuelta al edit con flash de √©xito
    #}
    {#
        DISE√ëO ACTUALIZADO (100% DE ANCHO, EN PILA):
        - Se reemplazan las dos columnas (50/50) por dos bloques apilados al 100% de ancho.
        - PRIMERO: Card de "Subir nuevas im√°genes" (full width)
        - SEGUNDO: Card de "Im√°genes actuales" (full width), debajo del anterior
        - La grilla interna de miniaturas se mantiene como est√° (2 por fila con col-6)
    #}

    {# BLOQUE 1: Subir nuevas im√°genes (100% ancho) #}
    <div class="mt-4">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="fas fa-upload"></i> Subir nuevas im√°genes</h5>
            </div>
            <div class="card-body">
                {#
                    form_start con action personalizada:
                    - path('app_product_upload_images', { id: product.id })
                    - Ruta: /admin/product/{id}/images donde {id} = ID del producto
                    - Ejemplo: /admin/product/5/images si product.id = 5
                #}
                {{ form_start(uploadForm, {
                    action: path('app_product_upload_images', { id: product.id }),
                    method: 'POST',
                    attr: {
                        enctype: 'multipart/form-data',
                        'data-turbo': 'false'
                    }
                }) }}
                    {#
                        form_row renderiza el campo 'files' del ProductImageType
                        - Input type="file" con multiple="multiple"
                        - Accept="image/*" para filtrar en el explorador
                        - Validaciones en servidor: Count(max 10), Image(5MB, JPEG/PNG/WEBP)
                    #}
                    {{ form_row(uploadForm.files) }}
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-cloud-upload-alt"></i> Subir im√°genes
                    </button>
                {{ form_end(uploadForm) }}
            </div>
        </div>
    </div>

    {# BLOQUE 2: Im√°genes actuales (100% ancho), debajo del anterior #}
    <div class="mt-4">
        <div class="card">
            <div class="card-header bg-secondary text-white">
                {#
                    product.productImages es la colecci√≥n OneToMany
                    Viene del m√©todo getProductImages() de la entidad Product
                    Filtro |length cuenta cu√°ntas im√°genes tiene
                #}
                <h5 class="mb-0">
                    <i class="fas fa-images"></i>
                    Im√°genes actuales ({{ product.productImages|length }})
                </h5>
            </div>
            <div class="card-body">
                {# Condicional: ¬øtiene im√°genes? #}
                {% if product.productImages|length > 0 %}
                    <div class="row">
                        {#
                            Iterar sobre cada ProductImage del producto
                            Cada 'image' es un objeto ProductImage con:
                            - id: clave primaria de product_image
                            - imageName: nombre original del archivo
                            - imagePath: ruta relativa desde public/ (ej: uploads/products/producto-5-123456.jpg)
                            - position: orden de visualizaci√≥n
                            - createdAt: timestamp de carga
                        #}
                        {% for image in product.productImages %}
                            <div class="col-4 mb-3">
                                <div class="card">
                                    {#
                                        asset() convierte ruta relativa a URL completa
                                        Ejemplo: asset('uploads/products/producto-5-123456.jpg')
                                        ‚Üí http://localhost/uploads/products/producto-5-123456.jpg

                                        style="height: 150px; object-fit: cover"
                                        - Fija altura para uniformidad
                                        - object-fit: cover recorta/ajusta para llenar el espacio sin distorsi√≥n
                                    #}
                                    <img src="{{ asset(image.imagePath) }}"
                                         class="card-img-top"
                                         alt="{{ image.imageName }}"
                                         style="height: 150px; object-fit: cover;">
                                    <div class="card-body text-center p-2">
                                        {# Muestra nombre original del archivo en texto peque√±o #}
                                        <small class="d-block text-muted mb-2">{{ image.imageName }}</small>

                                        {#
                                            FORMULARIO DE ELIMINACI√ìN CON SWEETALERT2

                                            CLASE js-delete-form:
                                            - Activa listener JavaScript global (en home/base.html.twig)
                                            - Intercepta submit y muestra modal SweetAlert2
                                            - Solo env√≠a si usuario confirma

                                            DATA ATTRIBUTES:
                                            - data-swal-title: t√≠tulo del modal
                                            - data-swal-text: texto descriptivo del modal
                                            - data-swal-confirm: texto del bot√≥n de confirmar (opcional)
                                            - data-swal-cancel: texto del bot√≥n de cancelar (opcional)

                                            RUTA DE ELIMINACI√ìN:
                                            - path('app_product_image_delete', {id: image.id})
                                            - Ruta: /admin/product/image/{id}/delete donde {id} = ID de la imagen
                                            - Ejemplo: /admin/product/image/23/delete si image.id = 23
                                            - IMPORTANTE: NO es el ID del producto, es el ID de ProductImage

                                            TOKEN CSRF:
                                            - csrf_token('delete_image' ~ image.id)
                                            - Genera token √∫nico por imagen
                                            - Ejemplo: delete_image23 para la imagen con ID 23
                                            - Validado en ProductImageController::deleteImage()
                                            - Previene ataques CSRF (Cross-Site Request Forgery)
                                        #}
                                        <form method="post"
                                              action="{{ path('app_product_image_delete', {id: image.id}) }}"
                                              class="js-delete-form"
                                              data-swal-title="¬øEliminar imagen?"
                                              data-swal-text="Esta acci√≥n no se puede deshacer. La imagen se eliminar√° permanentemente.">
                                            <input type="hidden" name="_token" value="{{ csrf_token('delete_image' ~ image.id) }}">
                                            <button type="submit" class="btn btn-danger btn-sm w-100">
                                                <i class="fas fa-trash"></i> Eliminar
                                            </button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% else %}
                    {#
                        Estado vac√≠o: el producto no tiene im√°genes
                        Muestra mensaje informativo con icono
                    #}
                    <div class="alert alert-info mb-0">
                        <i class="fas fa-info-circle"></i>
                        Este producto no tiene im√°genes. Usa el formulario superior para subir algunas.
                    </div>
                {% endif %}
            </div>
        </div>
    </div>
    {% endset %}

    {% include 'partials/_card.html.twig' with {
        title: 'Editar Producto',
        content: cardBody,
        color: 'light'
    } %}
{% endblock %}
